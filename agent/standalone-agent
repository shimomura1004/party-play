#!/usr/bin/env ruby

if ARGV.include?("-d")
  Process.daemon
  open("tmp/pids/agent.pid", "w"){|f| f.write(Process.pid)}
  Process.pid
end

require "redis"
require_relative "../config/initializers/redis"
require_relative "../config/initializers/player"

class StandaloneAgent
  def initialize
    Thread.new do
      client = Redis.current.client
      subscriber = Redis.new(:host => client.host, :port => client.port)
      subscriber.subscribe(:skip) do |on|
        on.message { skip }
      end
    end
  end

  def play(path)
    @pid = spawn("#{Player} #{path}")
    @player = Process.detach(@pid)
  end

  def skip
    Process.kill(:TERM, @pid)
  end


  def start_playing
    while true
      begin
        key_for_next_song = Redis.current.lindex("playlist", 0)

        Thread.pass
        sleep 1 and next unless key_for_next_song
        $stderr.puts "Playing: #{key_for_next_song}"

        song_data = eval(Redis.current.get(key_for_next_song))
        $stderr.puts "Song data: #{song_data.inspect}"
      rescue Redis::CannotConnectError => e
        $stderr.puts "Redis connection error"
        Thread.pass
        sleep 10 and next
      end

      play(song_data[:path])
      @player.join

      Redis.current.del(key_for_next_song) rescue Redis::CannotConnectError
      begin
        Redis.current.lpop("playlist")
        File::delete(song_data[:path])
        File::delete(song_data[:artwork]) if File::exists?(song_data[:artwork])
      rescue => e
        $stderr.puts e.inspect
      end
    end
  end
end

$stderr.puts "Start standalone agent"
agent = StandaloneAgent.new
agent.start_playing
